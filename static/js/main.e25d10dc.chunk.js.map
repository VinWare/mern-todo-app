{"version":3,"sources":["logo.svg","components/create-todo.component.js","components/edit-todo.component.js","components/todos-list.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateTodo","props","state","description","responsible","priority","completed","onChangeDescription","bind","onChangeResponsible","onChangePriority","onSubmit","style","marginTop","this","className","type","value","onChange","name","id","checked","e","setState","target","preventDefault","console","log","newTodo","axios","post","then","res","data","Component","EditTodo","onChangeCompleted","align","htmlFor","obj","put","match","params","history","push","get","response","catch","error","Todo","todo","to","_id","TodosList","todos","todoList","map","currentTodo","i","key","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e25d10dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class CreateTodo extends Component {\n    render() {\n    return (\n        <div style={{marginTop: 10}}>\n            <h3>Create New Todo</h3>\n            <form onSubmit={this.onSubmit}>\n                <div className=\"form-group\"> \n                    <label>Description: </label>\n                    <input  type=\"text\"\n                            className=\"form-control\"\n                            value={this.state.description}\n                            onChange={this.onChangeDescription}\n                            />\n                </div>\n                <div className=\"form-group\">\n                    <label>Responsible: </label>\n                    <input \n                            type=\"text\" \n                            className=\"form-control\"\n                            value={this.state.responsible}\n                            onChange={this.onChangeResponsible}\n                            />\n                </div>\n                <div className=\"form-group\">\n                    <div className=\"form-check form-check-inline\">\n                        <input  className=\"form-check-input\" \n                                type=\"radio\" \n                                name=\"priorityOptions\" \n                                id=\"priorityLow\" \n                                value=\"Low\"\n                                checked={this.state.priority==='Low'} \n                                onChange={this.onChangePriority}\n                                />\n                        <label className=\"form-check-label\">Low</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input  className=\"form-check-input\" \n                                type=\"radio\" \n                                name=\"priorityOptions\" \n                                id=\"priorityMedium\" \n                                value=\"Medium\" \n                                checked={this.state.priority==='Medium'} \n                                onChange={this.onChangePriority}\n                                />\n                        <label className=\"form-check-label\">Medium</label>\n                    </div>\n                    <div className=\"form-check form-check-inline\">\n                        <input  className=\"form-check-input\" \n                                type=\"radio\" \n                                name=\"priorityOptions\" \n                                id=\"priorityHigh\" \n                                value=\"High\" \n                                checked={this.state.priority==='High'} \n                                onChange={this.onChangePriority}\n                                />\n                        <label className=\"form-check-label\">High</label>\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Create Todo\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div>\n    )\n}\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        description: '',\n        responsible: '',\n        priority: '',\n        completed: false\n    }\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeResponsible = this.onChangeResponsible.bind(this);\n    this.onChangePriority = this.onChangePriority.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n}\nonChangeDescription(e) {\n    this.setState({\n        description: e.target.value\n    });\n}\n\nonChangeResponsible(e) {\n    this.setState({\n        responsible: e.target.value\n    });\n}\n\nonChangePriority(e) {\n    this.setState({\n        priority: e.target.value\n    });\n}\nonSubmit(e) {\n    e.preventDefault();\n    \n    console.log(`Form submitted:`);\n    console.log(`Todo Description: ${this.state.description}`);\n    console.log(`Todo Responsible: ${this.state.responsible}`);\n    console.log(`Todo Priority: ${this.state.priority}`);\n     \n        const newTodo = {\n            description: this.state.description,\n            responsible: this.state.responsible,\n            priority: this.state.priority,\n            completed: this.state.completed\n        };\n    \n    axios.post('https://calm-fortress-42269.herokuapp.com/todos', newTodo)\n            .then(res => console.log(res.data));\n\n        this.setState({\n            description: '',\n            responsible: '',\n            priority: '',\n            completed: false\n        })\n}\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nexport default class EditTodo extends Component {\n    render() {\n        return (\n             <div>\n                <h3 align=\"center\">Update Todo</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\"> \n                        <label>Description: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.description}\n                                onChange={this.onChangeDescription}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input \n                                type=\"text\" \n                                className=\"form-control\"\n                                value={this.state.responsible}\n                                onChange={this.onChangeResponsible}\n                                />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityLow\" \n                                    value=\"Low\"\n                                    checked={this.state.priority==='Low'} \n                                    onChange={this.onChangePriority}\n                                    />\n                            <label className=\"form-check-label\">Low</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityMedium\" \n                                    value=\"Medium\" \n                                    checked={this.state.priority==='Medium'} \n                                    onChange={this.onChangePriority}\n                                    />\n                            <label className=\"form-check-label\">Medium</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"priorityOptions\" \n                                    id=\"priorityHigh\" \n                                    value=\"High\" \n                                    checked={this.state.priority==='High'} \n                                    onChange={this.onChangePriority}\n                                    />\n                            <label className=\"form-check-label\">High</label>\n                        </div>\n                    </div>\n                    <div className=\"form-check\">\n                        <input  className=\"form-check-input\"\n                                id=\"completedCheckbox\"\n                                type=\"checkbox\"\n                                name=\"completedCheckbox\"\n                                onChange={this.onChangeCompleted}\n                                checked={this.state.completed}\n                                value={this.state.completed}\n                                />\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">\n                            Completed\n                        </label>                        \n                    </div>\n\n                    <br />\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Update Todo\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n    onChangeDescription(e) {\n        this.setState({\n            description: e.target.value\n        });\n    }\n\n    onChangeResponsible(e) {\n        this.setState({\n            responsible: e.target.value\n        });\n    }\n\n    onChangePriority(e) {\n        this.setState({\n            priority: e.target.value\n        });\n    }\n\n     onSubmit(e) {\n        e.preventDefault();\n        const obj = {\n            description: this.state.description,\n            responsible: this.state.responsible,\n            priority: this.state.priority,\n            completed: this.state.completed\n        };\n        console.log(obj);\n        axios.put('https://calm-fortress-42269.herokuapp.com/todos'+this.props.match.params.id, obj)\n            .then(res => console.log(res.data));\n        \n        this.props.history.push('/');\n    }\n    onChangeCompleted(e) {\n        this.setState({\n            completed: !this.state.completed\n        });\n    }\n    constructor(props) {\n        super(props);\n        \n        this.onChangeDescription = this.onChangeDescription.bind(this);\n        this.onChangeResponsible = this.onChangeResponsible.bind(this);\n        this.onChangePriority = this.onChangePriority.bind(this);\n        this.onChangeCompleted = this.onChangeCompleted.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            description: '',\n            responsible: '',\n            priority: '',\n            completed: false\n        }\n    }\n    componentDidMount() {\n        axios.get('http://localhost:4000/todos/'+this.props.match.params.id)\n            .then(response => {\n                this.setState({\n                    description: response.data.description,\n                    responsible: response.data.responsible,\n                    priority: response.data.priority,\n                    completed: response.data.completed\n                })   \n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Todo = props => (\n    <tr>\n        <td>{props.todo.description}</td>\n        <td>{props.todo.responsible}</td>\n        <td>{props.todo.priority}</td>\n        <td>\n            <Link to={\"/edit/\"+props.todo._id}>Edit</Link>\n        </td>\n    </tr>\n)\n\nexport default class TodosList extends Component {\n    render() {\n        return (\n            <div>\n            <h3>Todos List</h3>\n            <table className=\"table table-striped\" style={{ marginTop: 20 }} >\n                <thead>\n                    <tr>\n                        <th>Description</th>\n                        <th>Responsible</th>\n                        <th>Priority</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { this.todoList() }\n                </tbody>\n            </table>\n        </div>\n        )\n    }\n    constructor(props) {\n        super(props);\n        this.state = {todos: []};\n    }\n    componentDidMount() {\n        axios.get('https://calm-fortress-42269.herokuapp.com/todos')\n            .then(response => {\n                this.setState({ todos: response.data });\n            })\n            .catch(function (error){\n                console.log(error);\n            })\n    }\n    todoList() {\n        return this.state.todos.map(function(currentTodo, i){\n            return <Todo todo={currentTodo} key={i} />;\n        })\n    }\n} ","import React from 'react';\nimport logo from './logo.svg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport CreateTodo from \"./components/create-todo.component\";\nimport EditTodo from \"./components/edit-todo.component\";\nimport TodosList from \"./components/todos-list.component\";\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n              <h2>MERN-Stack Todo App</h2>\n              <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\">MERN-Stack Todo App</Link>\n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Todos</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br/>\n          <Route path=\"/\" exact component={TodosList} />\n          <Route path=\"/edit/:id\" component={EditTodo} />\n          <Route path=\"/create\" component={CreateTodo} />\n              </div>\n              </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}